'use strict';
const userNameInput = document.getElementById('user-name');
const assessmentButton = document.getElementById('assessment');
const resultDivision = document.getElementById('result-area');
const tweetDivision = document.getElementById('tweet-area');

assessmentButton.addEventListener(
  'click',
  () => {
    const userName = userNameInput.value;
    if (userName.length === 0) {
      // 名前が空の時は処理を終了する
      return; // 名前の文字列の長さが 0 だった場合 return を実行する。
    } // 関数の途中にある return の後ろに 戻り値 を設定していないので、戻り値なしで関数が終了する。

    // 診断結果表示エリアの作成
    resultDivision.innerText = ''; // 診断結果表示エリアの内側の文字列を空文字列に変更することで、子要素を全削除する。
    const header = document.createElement('h3'); // createElement 関数で「診断結果」という h3 の見出しを作る。
    header.innerText = '診断結果';
    resultDivision.appendChild(header); // appendChild 関数で結果の div 要素に追加する。

    const paragraph = document.createElement('p'); // createElement 関数で、p 要素を作成する。
    const result = assessment(userName); // assessment 関数で診断結果の文字列を取得し、p 要素の中の文字列として設定する。
    paragraph.innerText = result;
    resultDivision.appendChild(paragraph); // appendChild 関数で、div 要素 の子要素として p 要素を追加する。

    // ツイートエリアの作成
    tweetDivision.innerText = '';
    const anchor = document.createElement('a'); // 新規に a 要素を作成する。
    const hrefValue = // a 要素の href 属性に設定するための URI を変数に代入する。
      'https://twitter.com/intent/tweet?button_hashtag=' +
      encodeURIComponent('あなたのいいところ') + // + を使った文字列結合で、URI エンコードされた「あなたのいいところ」という文字列を結合する。
      '&ref_src=twsrc%5Etfw';

    anchor.setAttribute('href', hrefValue);
    anchor.setAttribute('class', 'twitter-hashtag-button');
    anchor.setAttribute('data-text', result);
    anchor.innerText = 'Tweet #あなたのいいところ';

    tweetDivision.appendChild(anchor);


    const script = document.createElement('script');
    script.setAttribute('src', 'https://platform.twitter.com/widgets.js');
    tweetDivision.appendChild(script);
  }
);

// Enter キーで診断する処理を追加
userNameInput.addEventListener(
  'keydown',
  (event) => {
    if(event.code === 'Enter') {
      // Enter が押されたときに実行する処理
      assessmentButton.dispatchEvent(new Event('click'));
    }
  }
)

const answers = [
  '###userName###のいいところは声です。###userName###の特徴的な声は皆を惹きつけ、心に残ります。',
  '###userName###のいいところはまなざしです。###userName###に見つめられた人は、気になって仕方がないでしょう。',
  '###userName###のいいところは情熱です。###userName###の情熱に周りの人は感化されます。',
  '###userName###のいいところは厳しさです。###userName###の厳しさがものごとをいつも成功に導きます。',
  '###userName###のいいところは知識です。博識な###userName###を多くの人が頼りにしています。',
  '###userName###のいいところはユニークさです。###userName###だけのその特徴が皆を楽しくさせます。',
  '###userName###のいいところは用心深さです。###userName###の洞察に、多くの人が助けられます。',
  '###userName###のいいところは見た目です。内側から溢れ出る###userName###の良さに皆が気を惹かれます。',
  '###userName###のいいところは決断力です。###userName###がする決断にいつも助けられる人がいます。',
  '###userName###のいいところは思いやりです。###userName###に気をかけてもらった多くの人が感謝しています。',
  '###userName###のいいところは感受性です。###userName###が感じたことにみんなが共感し、わかりあうことができます。',
  '###userName###のいいところは節度です。強引すぎない###userName###の考えに皆が感謝しています。',
  '###userName###のいいところは好奇心です。新しいことに向かっていく###userName###の心構えが多くの人に魅力的に映ります。',
  '###userName###のいいところは気配りです。###userName###の配慮が多くの人を救っています。',
  '###userName###のいいところはその全てです。ありのままの###userName###自身がいいところなのです。',
  '###userName###のいいところは自制心です。やばいと思ったときにしっかりと衝動を抑えられる###userName###が皆から評価されています。'
];

/**
 * 名前の文字列を渡すと診断結果を返す関数
 * @param {string} userName ユーザーの名前
 * @return {string} 診断結果
 */
function assessment(userName) {
  // 全文字コード番号を取得してそれを足し合わせる
  let sumOfCharCode = 0;
  for (let i = 0; i < userName.length; i++) {
    sumOfCharCode = sumOfCharCode + userName.charCodeAt(i);
  }

  // 文字のコード番号の合計を回答の数で割って添字の数値を求める
  const index = sumOfCharCode % answers.length;
  let result = answers[index];

  // ###userName### をユーザーの名前に置き換える
  result = result.replaceAll('###userName###',userName);
  return result;
}

// テストを行う関数
function test() {
  console.log('診断結果の文章のテスト');

  // 太郎
  console.log('太郎');
  console.assert(
    assessment('太郎') ===
      '太郎のいいところは決断力です。太郎がする決断にいつも助けられる人がいます。',
    '診断結果の文言の特定の部分を名前に置き換える処理が正しくありません。'
  );

  // 次郎
  console.log('次郎');
  console.assert(
    assessment('次郎') ===
      '次郎のいいところは自制心です。やばいと思ったときにしっかりと衝動を抑えられる次郎が皆から評価されています。',
    '診断結果の文言の特定の部分を名前に置き換える処理が正しくありません。'
  );

  // 花子
  console.log('花子');
  console.assert(
    assessment('花子') ===
      '花子のいいところはまなざしです。花子に見つめられた人は、気になって仕方がないでしょう。',
    '診断結果の文言の特定の部分を名前に置き換える処理が正しくありません。'
  );

  console.log('診断結果の文章のテスト終了');

  console.log('同じ名前なら、同じ結果を出力することのテスト');

  console.log('太郎');
  console.assert(
    assessment('太郎') === assessment('太郎'),
    '入力が同じ名前なら同じ診断結果を出力する処理が正しくありません。'
  );

  console.log('次郎');
  console.assert(
    assessment('次郎') === assessment('次郎'),
    '入力が同じ名前なら同じ診断結果を出力する処理が正しくありません。'
  );

  console.log('花子');
  console.assert(
    assessment('花子') === assessment('花子'),
    '入力が同じ名前なら同じ診断結果を出力する処理が正しくありません。'
  );

  console.log('同じ名前なら、同じ結果を出力することのテスト終了');
}

test();



/*
  1. いいところを診断できます
    1. 名前を入力すると診断できます
    2. 同じ名前なら、必ず同じ診断結果が出ます
    3. 診断後に、自分の名前入りの診断結果が表示されます
  2. 診断結果を X (旧 Twitter) に、ポスト(ツイート)できます

  width(ウィドス、ウィズ) : 幅。 padding : 詰め物をすること。
*/
/*
  実際のソフトウェアのような機能を作り込むことなく、見た目だけを作ったものを、 モックアップ といいます。

    ・「あなたのいいところは？」
    ・「診断したい名前を入れてください」という入力を促す言葉
    ・名前の入力欄
    ・「診断する」ボタン

      実際に使い勝手を想像して要件を見直したり、人にアイデアを伝えたりするために、このモックアップはとても役に立ちます。

  また、モックアップを紙で作ったものを、 ペーパーモックアップ と呼びます。



  input タグ は、入力欄を作るためのタグです。

    ・type 属性 : 入力の形式(テキストやパスワード、チェックボックス、ラジオボタンなど)を指定します。
    ・size 属性 : 入力欄(テキストフィールド)の大きさを設定します。
    ・maxlength 属性 : この入力欄に入力できる最大の文字数を設定します。

      size 属性や maxlength 属性は、テキスト形式やパスワード形式には使用できますが、
      チェックボックスやラジオボタンに使うことはできません。

  botton タグ は、ボタンを作るためのタグです。

    属性には JavaScript プログラムから用いる id 属性のみが設定されています。



  利用者が直接触れる部分のことを、 ユーザインタフェース (User Interface) 、略して UI といいます。

  色を設定する記入方法に、 16 進数カラーコード という書き方 があります。
  「光の三原色」の 赤(Red) ・ 緑(Green) ・ 青(Blue) をそれぞれ 2 桁の 16 進数で表しています。
  左から 2 桁ずつ RGB に対応しています。

    赤・緑・青の 3 色をそれぞれ 2 桁の 16 進数で表しているので、取りうる値としては 00 から FF まで存在しています。

    ・16 進数カラーコード : 「光の三原色」の 赤 (Red) ・ 緑 (Green) ・ 青 (Blue) をそれぞれ 2 桁の 16 進数で表しています。
      左から 2 桁ずつ RGB に対応しています。
      #FFFFFF | 白
      #000000 | 黒
      #FF0000 | 赤
      #00FF00 | 緑
      #0000FF | 青

      赤・緑・青の 3 色をそれぞれ 2 桁の 16 進数で表しているので、取りうる値としては 00 から FF まで存在しています。
      他にも「カラーピッカー」で検索すると、Web サイトや画像から 16 進数カラーコードを取得するソフトウェアが見つかります。

    プロのデザイナが手がけるような、おしゃれな色づかいのサイトを作りたい場合は
    「配色理論」や「色彩調和論」と呼ばれるものに基づいた色選びをする必要があります。
    「カラースキーム」で検索すると、coolors.co のような、配色理論などに基づいた色の組み合わせを提案してくれるサイトが見つかるので、
    それを活用してみるのもよいでしょう。



  要素の幅と余白、ボタンの CSS を設定してみましょう。
  margin は境界線より 外側 の余白、padding は境界線より 内側 の余白です。

    ・margin(マージン) : 要素の外側の余白です。
      width: 500px; // 幅を 500px に設定
      margin-right: auto; // 右側のマージンを自動調節
      margin-left: auto; // 左側のマージンを自動調節

    ・padding(パディング) : 要素の内側の余白を設定できるプロパティです。
      5px 20px // 上下を 5px、左右を 20px
    ・background-color : 背景色を設定します。
      #337ab7
    ・border-style : 境界線のスタイルを設定します。
      none

      境界線スタイル none は、境界線を表示しないという意味になります。
      なお、border は none(非表示)にした場合でも、あくまで見えないだけで両者の境界として存在しています。

    インラインレベルコンテンツは、上下の padding(パディング) を設定するとはみ出るため、基本的に設定しません。

  入力欄の CSS を設定してみましょう。

    ・height(ハイト) : 高さを指定するプロパティです。
*/



/*
  1. 診断結果のパターンのデータが複数存在します
  2. 名前を入力すると診断結果が出力されます
    1. 入力が同じ名前なら、同じ診断結果を出力します
    2. 診断結果の文章のうち名前を表す部分を、入力された名前に置き換える処理をします

  parameter(パラメータ) : 引数。 return value : 戻り値。
*/
/*
  カーソルを増やす機能を、 マルチカーソル機能 といいます。

  一度代入すると再編集できない値を、 定数 といいます。

    ・const : 宣言された変数の値を後から変更できません。
      値の再代入 | 不可能
      変数の再宣言 | 不可能
      変数の有効範囲(スコープ) | ブロック
    ・let
      値の再代入 | 可能
      変数の再宣言 | 不可能
      変数の有効範囲(スコープ) | ブロック
    ・ver
      値の再代入 | 可能
      変数の再宣言 | 可能
      変数の有効範囲(スコープ) | 関数

      変数の有効な範囲を、 スコープ と呼びます。
      スコープが一定の範囲内にとどまることで、意図しない箇所の変数変更が起きないように制限できます。

        const は、スコープの範囲がブロックと同じになります。
        ですから、if 文の中で宣言した変数を if 文の外側で参照することはできません。

      本格的なプログラムを書いていく時、スコープが必要以上に広いことはバグ(プログラムの間違い)の原因になります。

    1. まずは const の使用を検討します
    2. 変数の値を変更する必要がある場合のみ、 let を使用します
      (var は使いません)

  'use strict'; は、宣言後の記述ミスをエラーとして表示してくれる機能を呼び出すための記述です。
  日本語では「厳格モードを使う」という意味です。

    JavaScript では、この厳格モードを使うことでコーディングの自由度を制限できます。
    自由度を制限するとコーディングが大変になりそうですが、これは良いコードを書く上で大事です。

      厳格モードによって変わる挙動の代表例として、変数宣言が挙げられます。
      厳格モードを使わない場合、変数宣言をしなくてもエラーが起きません。
      一見すると便利に思われますが、タイポをしてしまった時にタイポのまま変数が宣言されてしまいます。

      厳格モードを設定することで、変数として宣言されていなければエラーが出力されるようになります。

    プログラミングでは、自分の意図しない挙動をする場合があります。
    そのような意図しない挙動をさせずに、できるだけ自分の意図に沿ったプログラミングを行うために今後は厳格モードを使っていきましょう。

  このような意図しない挙動をできるだけ減らして開発することを、 「安全な開発をする」 ということがあります。



  JSDoc と呼ばれる形式のコメントの書き方を、詳しく見てみましょう。

    /**
     * 名前の文字列を渡すと診断結果を返す関数   // 「関数の処理内容」を説明
     * @param {string} userName ユーザの名前 // @param は、関数の「引数」を表し、userName は、「引数の名前」を表す
     * @return {string} 診断結果             // @return は、関数の「戻り値」のこと、{string} は値の 型 が「文字列(string)型」であることを意味
      / // 「関数 assessment(userName) の引数が文字列で、戻り値も文字列」ということを表す

      ・型 : 値の種類のことです。
        JavaScript の型には、 数値、 文字列、 真偽値 などがあります。

    JSDoc はあくまでコメントなので、書かなくてもプログラムは動作します。
    しかし、JSDoc 形式でインタフェースが定義されていると、プログラムがとても読みやすいものになります。
    それだけではなく、JSDoc は「ソースコードからドキュメントを自動生成する機能」や
    「エディタでカーソルを合わせるとインタフェースが表示される機能」などを持っていて大変便利です。

  関数の内部の処理と、外部からの入力や外部への出力(ここでは引数と戻り値)を定義している「内外の境界」のことを、 インタフェース と呼びます。

    JavaScript は、「変数の型の情報をソースコードに書かない言語」であり、インタフェースを明らかにするためには、コメントで明示する必要があります。
    一方、JavaScript の仲間の TypeScript という言語のように、ソースコードの中に型の情報を書ける言語もあります。



  文字列を添え字とするため、数値に変換する時に使えるものとして、 文字コード があります。
  文字コードとは、文字や記号をコンピューター上で扱うために、それらに番号を割り振って表したものです。

    ・文字集合 : 文字を人間が理解できる形式で番号を割り振ります。
      Unicode
    ・符号化方式 : 文字集合で取り決めた番号をコンピューターが理解できる形式に変換します。
      UTF-16, UTF-8

      文字コードは規格ごとに互換性を持たせて、別々の文字コード規格であっても同じ文字を表せるようにしています。
      しかし、おおよそアルファベットのみで、漢字では互換性がほとんどありません。

    互換性が無い場合に起きる現象を、 文字化け といいます。

      文字化けは人から受け取った文章ファイルを手元で開くときに生じる場合があります。
      文章ファイルの文字コードと、手元の読み込むソフトの文字コードが違う場合です。
      そのような際は慌てずに文字コードを変更すれば読み込むことができます。

    実際に文字コードを扱ってみましょう。

      'A'.charCodeAt(0); // 'A' という文字列の 0 番目の文字コードを取得
      // 65 と表示
      'ABC'.charCodeAt(1); // 文字列 ABC の 1 番目の値である、B の文字コードを取得
      // 66 と表示

      let sum = 0;                        // 文字コードを足していく変数である sum を宣言
      let str = 'ABC';                    // 字列を保存する変数である str を宣言
      for(let i = 0;i < str.length; i++){ // str.length を用いて str の長さを取得し、str の文字の数 未満まで、1 ずつ足す
        console.log(str.charCodeAt(i))    // i 文字目の文字コードを出力させる処理
        sum += str.charCodeAt(i);         // sum に足し算する処理
      }
      console.log(sum);                   // sum の値を出力

        文字列を配列とみなして、 charCodeAt に添え字を渡し、どの文字を文字コードとして表すかを指定しています。



  ソフトウェアの動きを決める処理のことを、 ロジック といいます。

      1. 名前の全ての文字のコード番号の整数値を足す
      2. 足した結果を、診断結果のパターンの数で割った余りを取得する
      3. 余りを診断結果の配列の添え字として、診断結果の文字列を取得する



  ###userName### をユーザ-の名前に置き換える時は、 replaceAll() を使います。

    '何かしらの文字列や文章'.replaceAll('置き換える前の文字列', '置き換えた後の文字列');

      このように使用し、第 1 引数の文字列を全て第 2 引数の文字列に変換します。



  JavaScript に備わっているテスト機能に、 console.assert という関数 があります。
  console.assert は第 1 引数には正しいときに true 、正しくないときに false となるようにテストしたい式を書き、
  第 2 引数には第 1 引数が false 、つまりテストの結果が正しくなかったときに出したいメッセージを書きます。

    console.assert(1 + 2 === 4, '数値が一致しません。'); : 「Assertion failed: 数値が一致しません。」と表示
*/


/*
  createElement(クリエイト・エレメント) : 「要素を作成する」という意味。 create(クリエイト) : 作成する。
  appendChild(アペンド・チャイルド) : 「子を追加する」という意味。 append(アペンド) : 追加する。
*/
/*
  何もない場所に、プログラムから利用できるエリアを確保する時には、div タグ を使います。

    div (ディブ) タグの div とは Division(ディビジョン) の略称で、分割されたものという意味です。
    このタグは他のタグとは異なり、囲んでも多くの場合は何も起こりません。
    また、意味も「分割されている」「囲まれている」程度しか持ちません。
    しかし、JavaScript でプログラムとタグを関連付けたり、CSS で装飾したりしたいときに便利なため、この div タグ は非常によく使われるタグです。



  function() { 省略 } のような関数の書き方を、 無名関数 と言います。

    無名関数 は名前を持たない関数の記述法です。
    通常、関数は呼び出すときに、名前を使って呼び出します。
    しかし、無名関数は、呼び出す場所に直接書きこんでしまっているため、名前がなくても呼び出しができる状態になっています。
    そのため、不要な名前は定義しないことになっているのです。

  無名関数を、ES6 でより簡潔に書く書き方を、 アロー関数 と呼びます。
  アロー関数では、function という文字の代わりに => を使います。

    event => {
      console.log("これはアロー関数です。")
    }

      こちらも引数を通常の関数と同じように指定できますが、引数が 1 つだけであれば () を省略した書き方もできます。
      もし、引数の数が変化するのであれば、() をつけて書いた方が修正しやすいでしょう。



  入力欄に入力された名前を受け取ってみましょう。

    userNameInput オブジェクトの value プロパティから、名前の入力欄に入力された文字列を受け取ることができます。



  特定の処理の際に、処理を終了させるような処理を、 ガード句 といいます。

    if (userName.length === 0) {
    // 名前が空の時は処理を終了する
    return;
  }

    if と else を使って、条件に合致しない場合には、else のなかで処理を終了させるようにも書けます。

      if (userName.length !== 0) {
        // 名前が空でない場合は処理を継続する
      } else {
        // 名前が空の時は処理を終了する
        return;
      }

    しかし、処理をさせたくない条件が増えたときに、if の {} というスコープの入れ子が深くなってしまうため、それを避けて読みやすくするために使います。

      if (userName.length !== 0) {
        // 名前が空でない場合は処理を継続する
        if (userName.length !== 1) {
          // 名前が 1 文字でない場合は処理を継続する
        } else {
          // 名前が 1 文字の場合は処理を終了する
          return;
        }
      } else {
        // 名前が空の時は処理を終了する
        return;
      }



  if や while の条件式に与えたとき、true になる値のことを truthy な値、false になる値のことを falsy な値 といいます。

    ・truthyな値
      true, true 以外のほとんどの値
    ・falsyな値
      false, null, undefined, 空文字列 '', 数値の 0, 数値の NaN (非数という、数値にできないことを意味する特殊な値)

      たとえば、ガード句は、userName が false であれば処理を終了させる、
      if (!userName) return;
      のように書くことができます。



  document.createElement を使うと、まず <p></p> や <h3></h3> のような要素を作成し、後から innerText プロパティを用いてタグの中身を設定できます。

    親要素と子要素 は HTML の入れ子構造で重要な概念です。

      <div id="result-area">
        <h3>診断結果</h3>
        <p>あなたのいいところは声です。あなたの特徴的な声は皆を惹きつけ、心に残ります。</p>
      </div>

        この HTML の場合、 div が親要素、 h3 と p が子要素に当たります。

    子要素を削除するための関数として、 removeChild という関数 があります。
    これは特定の子要素を削除するための関数です。
    append の「追加する」という意味に対して、 remove は「取り除く」という意味なので、対義語のようになっています。

      while (resultDivision.firstChild) { // resultDivision.firstChild と書くことで、resultDivision の先頭の子要素を取得
        // resultDivision に子要素があれば削除し続ける
        resultDivision.removeChild(resultDivision.firstChild);
      }

      while 文を組み合わせることで、 innerText プロパティを用いた際と同じように、子要素を全て削除できます。
      注意点として、removeChild は削除したい要素が存在していなければ、エラーになってしまいます。
      削除するときは削除したい要素がきちんと存在するか確かめるコードを合わせて書くようにしましょう。
*/



/*
  encode(エンコード) : 符号化する。記号化する。 decode(デコード) : 復号する。解読する。
*/
/*
  JavaScript で HTML 要素の属性を設定したい時は、 setAttribute を使います。

    なお、href など他の属性と異なり、class 属性 と id 属性に関しては それぞれ専用のプロパティが存在します。
    たとえば、class を変更したい場合は anchor.className = 'twitter-hashtag-button'; のように値を設定できます。

  HTML の要素には複数の class を持たせることができます。
  複数の class を JavaScript から管理する場合は classList を使うことができます。

    <a href="https://nnn.ed.nico/" class="nnn-link large-button green-text">N 予備校へアクセス</a>

      追加する場合は以下のように add() メソッドを使います。

    const anchor = document.createElement('a');
    anchor.classList.add('nnn-link');
    anchor.classList.add('large-button','green-text'); //複数の class を一度に追加できる

      メソッドとは、オブジェクトのプロパティである関数のことです。



  URI (ユーアールアイ) とは、インターネット上などにある情報やサービスを一意に識別するためのデータ形式で、Uniform Resource Identifier の略称です。

    https://twitter.com/intent/tweet?button_hashtag=あなたのいいところ&ref_src=twsrc%5Etfw

      ・URI のスキーム
        https の部分
      ・ホスト名
        twitter.com の部分
      ・リソース名
        /intent/tweet の部分
      ・クエリ
        ? 以降の部分

        URI のクエリに日本語のような 半角英数以外 の文字を含めるには、 URI エンコード を使います。
        URI に関する規格では半角英数以外を利用してはならないことになっているため、ブラウザや環境によっては動作しない可能性もあります。

          Web ページを制作する際、クエリを URI エンコードして半角英数のみにしておく方が安全だと言えます。

        なお、インターネット上の場所に限定したものとして、URL (Uniform Resource Locator の略称)と呼ぶこともあります。
        また、あまり聞くことはありませんが、 URN(Uniform Resource Name) という言葉も存在しています。

  URI のクエリに含めることのできない文字のために、それらの文字を %(パーセント) という記号から始まる
  16 進数で表現して含めるようにするための変換方法のことを、 URI エンコード といいます。
  パーセントエンコーディング などと呼ぶこともあります。

    ・encodeURIComponent 関数 : 文字列を URI エンコードされたものへ変換を行います。
    ・decodeURIComponent 関数 : URI エンコードされた文字列から元のものへ復元を行います。

      encodeURIComponent('あ'); // "%E3%81%82" と表示
      decodeURIComponent('%E3%81%82'); // "あ" と表示



  すでに作られたプログラムの動作や構造を解析することをリバースエンジニアリングといいます。
  一見複雑に見えるものを一つ一つしっかり読み解くことはプログラミングにおいてとても大切なことです。
*/



/*
  利用・修正・再配布ができるようにソースコードを公開したソフトウェアのことを オープンソースソフトウェア (OSS) といいます。

    オープンソースのソフトウェアを多くの人で修正しあう文化は、元々パッチ文化と呼ばれていました。
    パッチ (patch) とは、ソースコードを修正するために差分修正するファイルのことをいいます。
    パッチを送り合うこのパッチ文化は、昔は特定の知り合いだけの閉じられた世界で完結していました。

  GitHub は「ギットハブ」と読み、ソースコードを共有できる Web サービスです。
  多くのソフトウェアが、この GitHub 上でソースコードを公開しています。
  GitHub ではソーシャルネットワーキングサービス(SNS)の機能と、ソフトウェアを管理する機能が一緒になっていて、
  多くの人が簡単にオープンソースのソフトウェアの改善に参加できます。

    たとえば、VS Code も、GitHub 上でソースコードを公開しています。
    ソースコードを公開すると良いことがあります。

      ・ソースコードを公開することで、だれでも無償で利用できる。
      ・だれでも自由にソースコードのコピーを作って、それを修正できる。

        GitHub で修正した内容は、コピー元にも通知されますし、 多くの開発者の中で共有されます。
        また、オリジナルへの修正依頼を出してオリジナルの作者が OK すれば、オリジナルへ修正点を取り入れてもらうことすらできます。

        ある日突然新参者がソースコードへの修正依頼を出しても、 その人がどのようなソースコードの修正をしたのかを簡単に確認できますし、 その人がどのような人とつながっているのかも確認できるのです。
        その修正のやり取りも多くの人に公開され、議論のプロセスも共有されるため、多くの知見を世界中の人と共有できま

    GitHub では、ソースコードで構成されるものであれば、なんでも公開できます。
    たとえば、HTML や JavaScript なども該当します。
    そのため、HTML や JavaScript で構成される多くのコンテンツを、無料で世界に公開するための、最高のプラットフォームでもあるのです。
    プラットフォームとは、「基盤」や「土台」を意味します。

      なお、ソースコードを公開したくない場合には、非公開にも設定できます。


*/